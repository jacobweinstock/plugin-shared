// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/kcp.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KCP_Start_FullMethodName = "/protobuf.KCP/Start"
)

// KCPClient is the client API for KCP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KCPClient interface {
	Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type kCPClient struct {
	cc grpc.ClientConnInterface
}

func NewKCPClient(cc grpc.ClientConnInterface) KCPClient {
	return &kCPClient{cc}
}

func (c *kCPClient) Start(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, KCP_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KCPServer is the server API for KCP service.
// All implementations should embed UnimplementedKCPServer
// for forward compatibility
type KCPServer interface {
	Start(context.Context, *Empty) (*Empty, error)
}

// UnimplementedKCPServer should be embedded to have forward compatible implementations.
type UnimplementedKCPServer struct {
}

func (UnimplementedKCPServer) Start(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}

// UnsafeKCPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KCPServer will
// result in compilation errors.
type UnsafeKCPServer interface {
	mustEmbedUnimplementedKCPServer()
}

func RegisterKCPServer(s grpc.ServiceRegistrar, srv KCPServer) {
	s.RegisterService(&KCP_ServiceDesc, srv)
}

func _KCP_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KCPServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KCP_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KCPServer).Start(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// KCP_ServiceDesc is the grpc.ServiceDesc for KCP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KCP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.KCP",
	HandlerType: (*KCPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _KCP_Start_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kcp.proto",
}
